  Memory Management in Python:
In Python, memory management involves two main components: the stack and the heap.

Stack: The stack is a region of memory used for static memory allocation, which includes local variables, function call parameters, and function call information.

Heap: The heap is a region of memory used for dynamic memory allocation, where objects like lists, dictionaries, and custom objects are stored.

Example Diagram:
lua
Copy code
       +-----------------------+
       |     Higher Address    |
       +-----------------------+
       |        Heap           |    <-- Dynamic memory allocation
       +-----------------------+
       |                       |
       |                       |
       |        Stack          |    <-- Static memory allocation
       |                       |
       |                       |
       +-----------------------+
       |     Lower Address     |
       +-----------------------+
In the diagram:

The stack is located at the lower address, containing information such as local variables and function call information.
The heap is located at the higher address, containing dynamically allocated objects like lists, dictionaries, and custom objects.
In Python, memory management is handled automatically by the interpreter, which allocates and deallocates memory as needed for objects and variables. This automatic memory management simplifies memory management for developers, as they don't need to manually allocate and deallocate memory.
=======================================================================================================================
2
=============================================================================================================================

eg :

a=10
print(a)

step :  1

       +------------------------+
       |       Higher Address    |
       +------------------------+
       |          Heap          |
       |                        |   
       |                        |   
       +------------------------+
       |                        |
       |          Stack         |
       |   (Local variables,    |
       |    function calls)     |
       |                        |
       +------------------------+
       |       Lower Address    |
       +------------------------+

step  -  2 :

       +------------------------+
       |       Higher Address    |
       +------------------------+
       |          Heap          |
       |   Integer Object: 10   |   
       +------------------------+
       |          Stack         |
       |   a: Address of 10     |
       +------------------------+
       |       Lower Address    |
       +------------------------+
Step  -  3 :

       +------------------------+
       |       Higher Address    |
       +------------------------+
       |          Heap          |
       |   Integer Object: 10   |   
       +------------------------+
       |          Stack         |
       |   a: Address of 10     |
       +------------------------+
       |       Lower Address    |
       +------------------------+

Step   -      4:

       +------------------------+
       |       Higher Address    |
       +------------------------+
       |          Heap          |
       |                        |   
       |                        |   
       +------------------------+
       |                        |
       |          Stack         |
       |                        |
       +------------------------+
       |       Lower Address    |
       +------------------------+
The integer object 10 is stored in the heap.
The memory address of the integer object 10 is stored in the variable a in the stack.
After the program execution, the memory allocated for the stack and heap is reclaimed by the operating syste
=====================================================================================================================================
#Now using merge_sort example 
       +------------------------+
       |       Higher Address    |
       +------------------------+
       |          Heap          |
       |   (Original Array)     |   [5, 2, 8, 1, 9]
       +------------------------+
       |                        |
       |          Stack         |
       |  (Local variables and |
       |   function calls)      |
       |                        |
       |  merge_sort(arr=[5,2,8,1,9]) |
       |     left = [5, 2]       |
       |     right = [8, 1, 9]   |
       |     merge_sort(left=[5,2])  |
       |        left = [5]        |
       |        right = [2]       |
       |        merge_sort(right=[2]) |
       |        return [2]        |
       |     merge_sort(right=[8,1,9]) |
       |        left = [8]        |
       |        right = [1, 9]    |
       |        merge_sort(left=[8])  |
       |           return [8]     |
       |        merge_sort(right=[1,9]) |
       |           left = [1]     |
       |           right = [9]    |
       |           merge_sort(left=[1]) |
       |              return [1]  |
       |           merge_sort(right=[9]) |
       |              return [9]  |
       |        merge([8], [1, 9]) |
       |           lp = 0, rp = 0, fp = 0 |
       |           arr = [1, 8, 9] |
       |        return [1, 8, 9]  |
       |     merge([2], [1, 8, 9]) |
       |           lp = 0, rp = 0, fp = 0 |
       |           arr = [1, 2, 8, 9] |
       |        return [1, 2, 8, 9]  |
       |  merge([5], [1, 2, 8, 9]) |
       |     lp = 0, rp = 0, fp = 0 |
       |     arr = [1, 2, 5, 8, 9] |
       |  return [1, 2, 5, 8, 9] |
       |                        |
       +------------------------+
       |       Lower Address    |
       +------------------------+

In this diagram:

The original input array [5, 2, 8, 1, 9] is stored in the heap.
Function calls and local variables are stored in the stack.
Each function call to merge_sort is represented with its arguments and the returned result.
The merge function call is represented along with the pointers and the resulting merged array.
The final sorted array [1, 2, 5, 8, 9] is returned as the result of the merge_sort function call.
This detailed diagram illustrates the entire process of merge sort, including memory management in Python, from the initial function call to the final sorted array.

Let me know if you need further clarification or if you have any questions!